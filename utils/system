# System utils

#include guard
[ ! -z "$system_defined" ] && [ -z "$FORCE_IMPORT_UTILITY" ] && return 0
export system_defined=1

importutility string

function system.findappbundleid() {
	osascript -e "id of app \"$1\""
	#echo 'id of app' "$1" 'is something'
	#echo "id of app $@"
}

function system.private.getcurrentdatehyphenated() {
  local curdate=$(date +'%Y-%m-%d-%T')
  curdate="${curdate//:/-}"
  echo $curdate
}

# Pass the character you want as the separator. If not given
# will use hyphen "-"
function system.getcurrentdate() {
	local separator=$1
	if string.isemptyorblank $separator
	then
		echo $(system.private.getcurrentdatehyphenated)
	else
		echo $(string.simplereplace $(system.private.getcurrentdatehyphenated) "-" "$separator")
	fi
}

function system.findfolder() {
	mdfind kind:folder "$1"
}

function system.whoisusingport8080() {
	echo "lsof -i tcp:8080:"
	lsof -i tcp:8080
	echo "netstat -an | grep 8080:"
	netstat -an | grep 8080
}

function system.isprocessrunning() {
	if string.isemptyorblank $1
	then
		echo "Please enter the process name"
		return
	fi

	if [[ "$2" == "-partial" ]] || [[ "$2" == "--p" ]] || [[ "$2" == "--partial" ]] || [[ "$2" == "-p" ]] || [[ "$2" == "partial" ]]
	then
		# Allow partial match (don't use the -x)
		(pgrep -i -- "$1")
	else
		(pgrep -xi -- "$1")
	fi
}

# Call with command in paranthesis. For example: system.commandsucceeds $(open -a /Applications/Docker.app)
function system.commandsucceeds() {
    [ $? -eq 0 ]
}

function system.islinux() {
	string.equals "$(uname -s)" "Linux"
}

function system.ismacos() {
	string.equals "$(uname -s)" "Darwin"
}

# Show the public IP of the wireless connection
function system.ip() {
	if system.islinux
	then
		hostname -I | awk '{print $1}'
	else #assume macos
		ipconfig getifaddr en0
	fi
}


function system.fileexists() {
	[ -f "$1" ]
}

function system.direxists() {
	[ -d "$1" ]
}

# Clean all the file contents (make its size zero bytes)
# without deleting it.
function system.cleanfilecontents() {
	if ! system.fileexists "$1"
	then
		echo "File doesn't exist"
		return
	fi

	cat /dev/null > $1
}

# Create a file with any level deep folder structure
# even if the folders don't already exist
function system.createfileifdoesnotexist() {
	if system.fileexists "$1"
	then
		return
	fi

	# mkdir would have no effect if the directory already exists so safe to call.
	mkdir -p $(dirname $1)
	touch "$1"
}
