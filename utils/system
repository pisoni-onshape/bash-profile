# System utils

#include guard
[ ! -z "$system_defined" ] && [ -z "$FORCE_IMPORT_UTILITY" ] && return 0
export system_defined=1

importutility string

export DISK_VARIABLES_PATH="$BASH_PROFILE_PATH/variables"

function system.appbundleid() {
	osascript -e "id of app \"$1\""
	#echo 'id of app' "$1" 'is something'
	#echo "id of app $@"
}

function system.private.getcurrentdatehyphenated() {
  local curdate=$(date +'%Y-%m-%d-%T')
  curdate="${curdate//:/-}"
  echo $curdate
}

# Pass the character you want as the separator. If not given
# will use hyphen "-"
function system.getcurrentdate() {
	local separator=$1
	if string.isemptyorblank $separator
	then
		echo $(system.private.getcurrentdatehyphenated)
	else
		echo $(string.simplereplace $(system.private.getcurrentdatehyphenated) "-" "$separator")
	fi
}

function system.findfolder() {
	mdfind kind:folder "$1"
}

function system.whoisusingport8080() {
	echo "lsof -i tcp:8080:"
	lsof -i tcp:8080
	echo "netstat -an | grep 8080:"
	netstat -an | grep 8080
}

function system.isNodeRunningOnPort() {
  system.commandsucceeds $(lsof -iTCP -n -P | grep -q node.*127\.0\.0\.1:$1)
}

function system.isprocessrunning() {
  if calledfromterminal
  then
    general.showtrueorfalse $(system.isprocessrunning "$@")
    return
  fi

	if string.isemptyorblank $1
	then
		echo "Please enter the process name"
		return
	fi

	if [[ "$2" == "-partial" ]] || [[ "$2" == "--p" ]] || [[ "$2" == "--partial" ]] || [[ "$2" == "-p" ]] || [[ "$2" == "partial" ]]
	then
		# Allow partial match (don't use the -x)
		pgrep -i -- "$1" > /dev/null
	else
		pgrep -xi -- "$1" > /dev/null
	fi
}

# Call with command in paranthesis. For example: system.commandsucceeds $(open -a /Applications/Docker.app)
function system.commandsucceeds() {
    [ $? -eq 0 ]
}

# Essentially the same as above.
function system.lastcommandwassuccessful() {
    [ $? -eq 0 ]
}

function system.islinux() {
	string.equals "$(uname -s)" "Linux"
}

function system.ismacos() {
	string.equals "$(uname -s)" "Darwin"
}

# Show the public IP of the wireless connection
function system.ip() {
	if system.islinux
	then
		hostname -I | awk '{print $1}'
	else #assume macos
		ipconfig getifaddr en0
	fi
}


function system.fileexists() {
	[ -f "$1" ]
}

function system.isfileexecutable() {
	[[ -x "$1" ]] || [[ -x $(which "$1") ]]
}

function system.functionexists() {
	[[ $(type -t $1) == function ]] || [[ $(type -t $1) == builtin ]] || system.isfileexecutable "$1"
}

function system.direxists() {
	[ -d "$1" ]
}

# Clean all the file contents (make its size zero bytes)
# without deleting it. Pass a second argument "--silent" or "-s"
# if it should be silent (no error if the file doesn't exist).
function system.cleanfilecontents() {
	local filepath=$1
	local silent=$2
	if ! system.fileexists "$1"
	then
		if string.contains $silent "silent" || string.equals $silent "-s"
		then
			return 0
		else
			echo "File doesn't exist"
			return 1
		fi
	fi

	cat /dev/null > $1
}

function system.filenamefrompath() {
	echo $(basename $1)
}

function system.dirfrompath() {
	echo $(dirname $1)
}

# Create a file with any level deep folder structure
# even if the folders don't already exist
function system.createfileifdoesnotexist() {
	if system.fileexists "$1"
	then
		return
	fi

	# mkdir would have no effect if the directory already exists so safe to call.
	mkdir -p $(dirname $1)
	touch "$1"
}

# send a variable name to write its value to a file
# on disk so that it can be retrieved later. Pass the *name* of
# the variable only, not its value with "$".
# e.g.
# myvar="Piyush Soni"
# system.writevartodisk myvar
function system.writevartodisk() {
	local varname=$1
	if string.isemptyorblank $varname
	then
		return 1 #Error
	fi

	local value="${!varname}"
	local filepath="$DISK_VARIABLES_PATH/$varname"
	system.createfileifdoesnotexist "$filepath"
	echo "$value" > "$filepath"
}

# send a variable name to read its value from the file
# it was stored on disk. Pass the *name* of
# the variable only, not its value with "$".
# e.g.:
# myvar=$(system.readvarfromdisk myvar)
# The value will be read into the variable directly
function system.readvarfromdisk() {
	local varname=$1
	if string.isemptyorblank $varname
	then
		return 1 #Error
	fi

	local filepath="$DISK_VARIABLES_PATH/$varname"
	if system.fileexists $filepath
	then
		local value="$(<"$filepath")"
		echo "$value"
	else
		echo ""
		return 1
	fi
}

# Syntax:
# system.alert "title" "message"
function system.alert() {
	osascript -e "display alert \"$1\" message \"$2\""
}

# Incomplete.
function system.replacefilenames() {
	local searchRegex="$1"
	local replaceRegex="$2"
	local directory="$3"

	if [ -z "$directory" ]
	then
	 	# Assume only filename specified, search in current directory
		directory="."
	fi
}
