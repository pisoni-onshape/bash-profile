#include guard
[ ! -z "$general_defined" ] && [ -z "$FORCE_IMPORT_UTILITY" ] && return 0
export general_defined=1

importutility string

# Always call with $(), like general.showtrueorfalse $(<true/false values>)
function general.showtrueorfalse() {
  if [ $? -eq 0 ]
  then
      echo "True"
  else
      echo "False"
  fi
}

function general.showvaluetrueorfalse() {
  if $1
  then
    echo "True"
  else
    echo "False"
  fi
}

# Add two integers
function general.add() {
  echo $(($1+$2))
}

# Subtract two integers
function general.subtract() {
  echo $(($1-$2))
}

# Parameter : message to show. Inputs "yes / y" or "no / n" and returns
# true for yes and false for no. Use with if. 
function general.inputyesorno() {
  local message="$1"
  local colorHint="$2"
  local colorChanged="false"
  if string.equals $colorHint "caution"
  then
    color.red
    colorChanged="true"
  fi

  echo "$message (y/n)?"
  if string.equals $colorChanged "true"
  then
    color.reset
  fi

  while true; do
    read response

    response=$(string.tolower "$response")
    if [[ "$response" == "y" || "$response" == "yes" ]]; then
      return 0 # success
    elif [[ "$response" == "n" || "$response" == "no" ]]; then
      return 1 # failure
    else
      echo "Invalid input. Please enter 'y' or 'n'."
    fi
  done

  return 1
}

# Just pass a function name to it, should
# work for _most_ of them
function general.duration() {
  local time1=$SECONDS
  "$@" # Make the function call with its arguments. Smart.
  local time2=$SECONDS
  local duration=$(($time2-$time1))
  # However, if we call it with `echo`, it doesn't call the function.
  echo "Time taken to call $1 is $duration seconds"
}
