#include guard
[ ! -z "$general_defined" ] && [ -z "$FORCE_IMPORT_UTILITY" ] && return 0
export general_defined=1

importutility string

# Always call with $(), like general.showtrueorfalse $(<true/false values>)
function general.showtrueorfalse() {
  if [ $? -eq 0 ]
  then
      echo "True"
  else
      echo "False"
  fi
}

# Add two integers
function general.add() {
  echo $(($1+$2))
}

# Subtract two integers
function general.subtract() {
  echo $(($1-$2))
}

# Just pass a function name to it, should
# work for _most_ of them
function general.duration() {
  local time1=$SECONDS
  "$@" # Make the function call with its arguments. Smart.
  local time2=$SECONDS
  local duration=$(($time2-$time1))
  # However, if we call it with `echo`, it doesn't call the function.
  echo "Time taken to call $1 is $duration seconds"
}
