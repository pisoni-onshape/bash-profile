#git utilities

#include guard
string.isnotemptyorblank $git_defined && return 0
export git_defined=1



# Import utility modules
importutility string
importutility system

function git.getcurrentbranch() {
  local currentbranch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
  echo $currentbranch
}

function git.hasUncommittedChanges() {
	[ -n "$(git status --porcelain)" ]	
}

function git.getlatestcommitid() {
	local latestSHAId=$(git rev-parse HEAD | cut -c 1-8)
	echo $latestSHAId
}

function git.branchislsbreleasebased() {
	local currentbranch=$(git.getcurrentbranch)
	string.endswith $currentbranch "-lsb-rel-[0-9].[0-9]*"
}

function git.branchislsbmasterbased() {
	local currentbranch=$(git.getcurrentbranch)
	#echo $currentbranch
	string.endswith $currentbranch "-lsb-master"
}


function git.branchisreleasebased() {
	local currentbranch=$(git.getcurrentbranch)
	! git.branchislsbreleasebased && string.endswith $currentbranch "-rel-[0-9].[0-9]*"
}

function git.branchismasterbased() {
	local currentbranch=$(git.getcurrentbranch)
	! git.branchislsbmasterbased && string.endswith $currentbranch "-master"
}

function git.skipworktree() {
  git update-index --skip-worktree "$1"
}

function git.unskipworktree() {
  git update-index --no-skip-worktree $1
}

function git.backupbranch() {
  currentbranch=$(git.getcurrentbranch)
  searchstring=$USER
  replacestring=backup/$USER
  separator=/
  curdate=$(system.getcurrentdate)
  newbranch="${currentbranch/$searchstring/$replacestring}/$curdate"
  echo $newbranch
  # create new backup branch
  git checkout -b $newbranch
  # go back to our branch
  git checkout $currentbranch
}