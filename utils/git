#git utilities

#include guard
[ ! -z "$git_defined" ] && [ -z "$FORCE_IMPORT_UTILITY" ] && return 0


export git_defined=1
export GIT_SKIP_TREE_FILES_LIST=~/.git-skipped-worktree-files
export GIT_PATCH_DIR=~/patches

## Ignore
export globalgitignorefile=$HOME/.gitignore


# Credit to this alias goes to this Slack conversation : https://onshape.slack.com/archives/C18HMGX32/p1495031914762665
alias gb='cur=$(git rev-parse --abbrev-ref HEAD); prev=$(git rev-parse --abbrev-ref @{-1}); git for-each-ref --sort=committerdate refs/heads/ --format="%(color:reset)  %(refname:short)|%(color:black bold)%(committerdate:relative)%(color:reset)" | column -ts"|" | sed -e "s,  ${cur} ,$(tput setaf 2)$(tput bold)* ${cur} ," | sed -e "s,  ${prev} ,$(tput setaf 3)$(tput bold)  ${prev} ,";'

# Import utility modules
importutility string
importutility system

function __ensurepatchdirexists() {
  if ! system.direxists $GIT_PATCH_DIR
  then
    mkdir $GIT_PATCH_DIR
  fi
}

function git.renamebranch() {
	git branch -m $1 $2
}

function git.renamecurrentbranch() {
	git branch -m $1
}

function git.getcurrentbranch() {
  local currentbranch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
  echo $currentbranch
}

function git.hasUncommittedChanges() {
	[ -n "$(git status --porcelain)" ]
}

function git.getlatestcommitid() {
	local latestSHAId=$(git rev-parse HEAD | cut -c 1-8)
	echo $latestSHAId
}

function git.isoneoftheofficialbranches() {
  local currentbranch=$(git.getcurrentbranch)
  string.equals $currentbranch "master" || string.equals $currentbranch $CURRENT_RELEASE || string.equals $currentbranch $LSB_MASTER || string.equals $currentbranch $LSB_CURRENT_RELEASE
}

function git.branchislsbreleasebased() {
	local currentbranch=$(git.getcurrentbranch)
	string.endswith $currentbranch "-lsb-rel-[0-9].[0-9]*"
}

function git.branchislsbmasterbased() {
	local currentbranch=$(git.getcurrentbranch)
	#echo $currentbranch
	string.endswith $currentbranch "-lsb-master"
}


function git.branchisreleasebased() {
	local currentbranch=$(git.getcurrentbranch)
	! git.branchislsbreleasebased && string.endswith $currentbranch "-rel-[0-9].[0-9]*"
}

function git.branchismasterbased() {
	local currentbranch=$(git.getcurrentbranch)
	! git.branchislsbmasterbased && string.endswith $currentbranch "-master"
}

# Give the full file path for the _tracked_ file you want to ignore
function git.skipworktree() {
  git update-index --skip-worktree "$1"
  system.createfileifdoesnotexist $GIT_SKIP_TREE_FILES_LIST
  echo "$1">>$GIT_SKIP_TREE_FILES_LIST
}

function git.unskipworktree() {
  git update-index --no-skip-worktree $1
  if system.ismacos
  then
    # Seems this empty backup is required.
    sed -i '' "s|$1||g" $GIT_SKIP_TREE_FILES_LIST
  else
    sed -i "s|$1||g" $GIT_SKIP_TREE_FILES_LIST
  fi
}

function git.openskipworktreefile() {
  edit $GIT_SKIP_TREE_FILES_LIST
}

# ToDo : Refactor the common code out of the below two functions
function git.backupbranch() {
  local additionalNotes=""
  if string.isnotemptyorblank $1
  then
    # Replace spaces with hyphens if there's a comment to
    # add with the backup branch name and prepend a slash.
    additionalNotes=$(string.simplereplace "/$1" " " "-")
  fi

  local currentbranch=$(git.getcurrentbranch)
  local newbranch=""
  local searchstring=$USER
  local curdate=$(system.getcurrentdate)

  if string.contains $currentbranch $searchstring
  then
    local replacestring=backup/$USER
    newbranch="${currentbranch/$searchstring/$replacestring}$additionalNotes/$curdate"
  else
    newbranch="backup/$currentbranch$additionalNotes/$curdate"
  fi

  # create new backup branch
  git checkout -b $newbranch
  # go back to our branch
  git checkout $currentbranch
}

# Backup the current branch but mark that as 'starred', more important
# than the usual backups
function git.starbackupbranch() {
  currentbranch=$(git.getcurrentbranch)
  searchstring=$USER
  replacestring=starred/$USER
  separator=/
  curdate=$(system.getcurrentdate)
  newbranch="${currentbranch/$searchstring/$replacestring}/$curdate"
  echo $newbranch
  # create new backup branch
  git checkout -b $newbranch
  # go back to our branch
  git checkout $currentbranch
}

function git.getbugnumberfrombranch() {
  local branchname=$1
  if string.isemptyorblank $branchname
  then
    branchname=$(git.getcurrentbranch)
  fi

  # Just in case the branch name contains an uppercase BEL
  branchname=$(string.simplereplace $branchname "BEL" "bel")
  # sed syntax : "s,search_string,replace_string,regex_flags" (most other characters allowed as separator instead of ,)
  local bugnumber=$(echo $branchname | sed -En "s,.*/(and|bel|ios)-([[:digit:]]+)/.*,\1-\2,p")
  echo $(string.toupper $bugnumber)
}

function git.commit() {
  local bugnumber=$(git.getbugnumberfrombranch)
  git status
  local message=""
  if string.isnotemptyorblank $1
  then
    message="$bugnumber"": $1"
  else
    message="$bugnumber"": more changes"
  fi

  echo "Adding files in the current directory to staging"
  git add .
  git commit -m "$message"
}

# Return true if a remote branch with a given substring of the branchname exists
function git.remotebranchexists() {
  string.isnotemptyorblank $(git ls-remote --heads origin "$1")
}

function git.localbranchexists() {
  system.commandsucceeds $(git show-ref --quiet refs/heads/$1)
}

# List all branches that are not "backup", "merged" or "archived"
# by default, but lists those ones (backup/merged/archived if you
# pass as argument)
function git.listbranches() {
  if string.isnotemptyorblank $1
  then
    git branch | grep $1
  else
    git branch | grep -v -e "backup/" -e "merged/" -e "archived/"
  fi
}

# Delete all merged branches
function git.deletemerged() {
  read -p "Are you sure you want to delete all merged branches? Press any key to continue. Press Ctrl+C to cancel."
  # We could have just used git branch --merged
  # that would actually list all branches that are merged
  # even without our naming convention
  git branch | grep 'merged/' | xargs git branch -D
}

# Creates a patch for the latest commit in your branch
function git.patchlatestcommit() {
  local message="$1"
  git.patchcommit "HEAD" "$message"
}

# Creates a patch for the specified commit in your branch
function git.patchcommit() {
  # Commit SHA1 id sent as argument. -1 tells git to patch only the last 1 commit.
  local commitId=$1
  local message="$2"
  local path=$(git.getpatchfilepath "$message")
  system.createfileifdoesnotexist $path

  git format-patch --filename-max-length 256 -1 $commitId --stdout > "$path"
  echo "Patch file created at $path"
}

function git.getbranchnamehyphened() {
  local currentbranch=$(git.getcurrentbranch)
  # remove the username for brevity
  currentbranch=$(string.simplereplace $currentbranch "$USER/" "")
  # replace slashes with hyphens
  echo $(string.simplereplace $currentbranch "/" "-")
}

function git.getpatchfilepath() {
  local dir="."
  local message="$1"
  if string.isnotemptyorblank $GIT_PATCH_DIR
  then
    dir="$GIT_PATCH_DIR"
  fi

  if string.isnotemptyorblank "$message"
  then
    message=$(string.simplereplace "$message" " " "-")
  fi

  local curdate=$(system.getcurrentdate)
  local bugNumber=$(git.getbugnumberfrombranch)
  local branchnamehyphenated=$(git.getbranchnamehyphened)
  local partialPath="$dir"
  if string.isnotemptyorblank $bugNumber
  then
    partialPath="$partialPath/$bugNumber"

    # Since we're creating this file in a directory
    # containing the bug number folder, we don't need
    # that again in this path. Remove bug number from
    local bugNumberStr=$bugNumber
    if ! string.isemptyorblank $bugNumberStr
    then
      bugNumberStr=$(string.tolower $bugNumberStr)
      bugNumberStr="$bugNumberStr-"
      branchnamehyphenated=$(string.simplereplace "$branchnamehyphenated" "$bugNumberStr" "")
    fi
  fi

  if string.isnotemptyorblank $message
  then
    branchnamehyphenated=$branchnamehyphenated-$message
  fi

  echo "$partialPath/$branchnamehyphenated-$curdate.patch"
}

# Make copy of the current branch to work on
# (which is a little different from taking a backup that
# you don't intend to use for actual work)
# Wouldn't make "copy" of a "copy" correctly according to
# our current nomenclature.
function git.makecopy() {
  local currentbranch=$(git.getcurrentbranch)
  local bugNumber=$(string.tolower $(git.getbugnumberfrombranch))
  local searchstring=$bugNumber
  local replacestring=$bugNumber/copy
  local additionalNotes=""
  local newbranch=$currentbranch
  if ! string.contains $currentbranch "$bugNumber/copy" # already contains the word copy
  then
    newbranch=${currentbranch/$searchstring/$replacestring}
  fi

  searchstring="copy"
  local foldername=""
  if string.isnotemptyorblank $1
  then
    # Replace spaces with hyphens
    additionalNotes=$(string.simplereplace "$1" " " "-")
    foldername=$additionalNotes
  else
    declare -i loopvar=1
    replacestring="copy/$loopvar"
    local tempbranchname=${newbranch/$searchstring/$replacestring}
    while git.localbranchexists $tempbranchname
    do
      loopvar=$((loopvar+1))
      replacestring="copy/$loopvar"
      tempbranchname=${newbranch/$searchstring/$replacestring}
    done
    foldername=$loopvar
  fi

  replacestring="copy/$foldername"
  newbranch=${newbranch/$searchstring/$replacestring}

  echo "Calling git checkout -b $newbranch"
  git checkout -b "$newbranch"
}

# Create a patch of uncommitted changes with *LOCAL* HEAD
function git.patchuncommittedchanges() {
  local message="$1"
  local path=$(git.getpatchfilepath "$1")
  system.createfileifdoesnotexist $path
  git diff HEAD > "$path"
  echo "Patch file created at $path"
}

# Applies a patch and creates .rej files for the changes
# that it could not apply.
function git.applypatch() {
  git apply --reject --whitespace=fix $1 # patch file path
}

# Pass the remote name : e.g. "origin" / others.
function git.setupstream() {
  local remoteName="$1"
  local branchNameToPush="$2"
  if string.isemptyorblank $remoteName
  then
    remoteName="origin"
  fi

  if string.isemptyorblank $branchNameToPush
  then
    branchNameToPush="$(git.getcurrentbranch)"
  fi

  git branch --set-upstream-to "$remoteName"/"$branchNameToPush"
}

function git.unsetupstream() {
  git branch --unset-upstream
}

# Checkout the branch that was checked out just before
# the current one. As expected, calling it twice should
# bring you back to the same branch.
function git.checkoutpreviousbranch() {
  git checkout -
}

function git.deletecurrentbranch() {
	read -p "Are you sure you want to delete the current branch? Press any key to continue. Press Ctrl+C to cancel."
	local currentbranch=$(git.getcurrentbranch)
	git.checkoutpreviousbranch
	git branch -D $currentbranch
}

function git.setglobalignorefile() {
	if string.isemptyorblank $1
	then
		git config --global core.excludesfile $globalgitignorefile
	else
		git config --global core.excludesfile $1
	fi
}

alias stoptrackingfile='git.skipworktree'
alias starttrackingfile='git.unskipworktree'
alias git.currentbranch='git.getcurrentbranch'
alias git.copybranch='git.makecopy'
alias opengitglobalignorefile='edit $globalgitignorefile'
alias openglobalgitignorefile='opengitglobalignorefile'
alias opengitignorefile='opengitglobalignorefile'
